[{"C:\\Users\\Gebruiker\\Desktop\\Graduaat programmeren\\GIP4\\frontend\\src\\reportWebVitals.js":"1","C:\\Users\\Gebruiker\\Desktop\\Graduaat programmeren\\GIP4\\frontend\\src\\index.tsx":"2","C:\\Users\\Gebruiker\\Desktop\\Graduaat programmeren\\GIP4\\frontend\\src\\App.tsx":"3","C:\\Users\\Gebruiker\\Desktop\\Graduaat programmeren\\GIP4\\frontend\\src\\Components\\Header.tsx":"4","C:\\Users\\Gebruiker\\Desktop\\Graduaat programmeren\\GIP4\\frontend\\src\\Components\\Login.tsx":"5","C:\\Users\\Gebruiker\\Desktop\\Graduaat programmeren\\GIP4\\frontend\\src\\Components\\Speler\\DelSpeler.tsx":"6","C:\\Users\\Gebruiker\\Desktop\\Graduaat programmeren\\GIP4\\frontend\\src\\Components\\Speler\\Spelers.tsx":"7","C:\\Users\\Gebruiker\\Desktop\\Graduaat programmeren\\GIP4\\frontend\\src\\Components\\Speler\\AddSpeler.tsx":"8","C:\\Users\\Gebruiker\\Desktop\\Graduaat programmeren\\GIP4\\frontend\\src\\Components\\Speler\\Speler.tsx":"9","C:\\Users\\Gebruiker\\Desktop\\Graduaat programmeren\\GIP4\\frontend\\src\\Components\\Speler\\EditSpeler.tsx":"10","C:\\Users\\Gebruiker\\Desktop\\Graduaat programmeren\\GIP4\\frontend\\src\\Components\\Team\\Team.tsx":"11","C:\\Users\\Gebruiker\\Desktop\\Graduaat programmeren\\GIP4\\frontend\\src\\Components\\Team\\AddSpelerToTeam.tsx":"12","C:\\Users\\Gebruiker\\Desktop\\Graduaat programmeren\\GIP4\\frontend\\src\\Components\\Team\\AddTeam.tsx":"13","C:\\Users\\Gebruiker\\Desktop\\Graduaat programmeren\\GIP4\\frontend\\src\\Components\\Team\\Teams.tsx":"14","C:\\Users\\Gebruiker\\Desktop\\Graduaat programmeren\\GIP4\\frontend\\src\\Components\\Match\\Matches.tsx":"15","C:\\Users\\Gebruiker\\Desktop\\Graduaat programmeren\\GIP4\\frontend\\src\\Components\\Match\\AddMatch.tsx":"16","C:\\Users\\Gebruiker\\Desktop\\Graduaat programmeren\\GIP4\\frontend\\src\\Components\\Match\\Match.tsx":"17","C:\\Users\\Gebruiker\\Desktop\\Graduaat programmeren\\GIP4\\frontend\\src\\Components\\Team\\EditTeamnaam.tsx":"18","C:\\Users\\Gebruiker\\Desktop\\Graduaat programmeren\\GIP4\\frontend\\src\\Components\\Speler\\SpelerMatchHist.tsx":"19"},{"size":362,"mtime":1637166856204,"results":"20","hashOfConfig":"21"},{"size":517,"mtime":1639305188999,"results":"22","hashOfConfig":"21"},{"size":2610,"mtime":1639785458969,"results":"23","hashOfConfig":"21"},{"size":3193,"mtime":1639825576019,"results":"24","hashOfConfig":"21"},{"size":2742,"mtime":1639304817470,"results":"25","hashOfConfig":"21"},{"size":3647,"mtime":1639777204380,"results":"26","hashOfConfig":"21"},{"size":3730,"mtime":1639841453165,"results":"27","hashOfConfig":"21"},{"size":10007,"mtime":1639841050653,"results":"28","hashOfConfig":"21"},{"size":3444,"mtime":1639777204384,"results":"29","hashOfConfig":"21"},{"size":9478,"mtime":1639777204381,"results":"30","hashOfConfig":"21"},{"size":7759,"mtime":1639916814111,"results":"31","hashOfConfig":"21"},{"size":8832,"mtime":1639841431316,"results":"32","hashOfConfig":"21"},{"size":2593,"mtime":1639777204387,"results":"33","hashOfConfig":"21"},{"size":2149,"mtime":1639777204388,"results":"34","hashOfConfig":"21"},{"size":3341,"mtime":1639780713195,"results":"35","hashOfConfig":"21"},{"size":14207,"mtime":1639780713194,"results":"36","hashOfConfig":"21"},{"size":8763,"mtime":1639828696244,"results":"37","hashOfConfig":"21"},{"size":2141,"mtime":1639841120546,"results":"38","hashOfConfig":"21"},{"size":3306,"mtime":1639828361696,"results":"39","hashOfConfig":"21"},{"filePath":"40","messages":"41","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},"1e58cps",{"filePath":"43","messages":"44","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"45"},{"filePath":"46","messages":"47","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"45"},{"filePath":"48","messages":"49","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"50","usedDeprecatedRules":"45"},{"filePath":"51","messages":"52","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"53","usedDeprecatedRules":"45"},{"filePath":"54","messages":"55","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"56","usedDeprecatedRules":"45"},{"filePath":"57","messages":"58","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"45"},{"filePath":"59","messages":"60","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"45"},{"filePath":"61","messages":"62","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"63","usedDeprecatedRules":"45"},{"filePath":"64","messages":"65","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"66","usedDeprecatedRules":"45"},{"filePath":"67","messages":"68","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"69","messages":"70","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"71","usedDeprecatedRules":"45"},{"filePath":"72","messages":"73","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"45"},{"filePath":"74","messages":"75","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"76","usedDeprecatedRules":"45"},{"filePath":"77","messages":"78","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"79","usedDeprecatedRules":"45"},{"filePath":"80","messages":"81","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"82","usedDeprecatedRules":"45"},{"filePath":"83","messages":"84","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"85","usedDeprecatedRules":"45"},{"filePath":"86","messages":"87","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"88","usedDeprecatedRules":"45"},{"filePath":"89","messages":"90","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"91","usedDeprecatedRules":"45"},"C:\\Users\\Gebruiker\\Desktop\\Graduaat programmeren\\GIP4\\frontend\\src\\reportWebVitals.js",[],["92","93"],"C:\\Users\\Gebruiker\\Desktop\\Graduaat programmeren\\GIP4\\frontend\\src\\index.tsx",[],["94","95"],"C:\\Users\\Gebruiker\\Desktop\\Graduaat programmeren\\GIP4\\frontend\\src\\App.tsx",[],"C:\\Users\\Gebruiker\\Desktop\\Graduaat programmeren\\GIP4\\frontend\\src\\Components\\Header.tsx",["96"],"import 'bootstrap/dist/css/bootstrap.css'\r\nimport {Container, Nav, Navbar, NavDropdown} from \"react-bootstrap\";\r\nimport {Link} from \"react-router-dom\";\r\nimport axios from \"axios\";\r\nimport {useState} from \"react\";\r\n\r\n\r\nconst Header = () => {\r\n    const loginURL = 'http://localhost:8080/api/login/user'\r\n\r\n    const [user] = useState();\r\n\r\n    const logout = async () => {\r\n       // een post die error 401 teruggeeft logged de user uit\r\n        await axios.post(loginURL, user ,{\r\n            auth:{\r\n                username: 'logout',\r\n                password: 'logout'\r\n            },\r\n            withCredentials: true\r\n\r\n        }).then((response) => {\r\n\r\n        }).catch(err => {\r\n            console.log(\"Logged out\");\r\n        })\r\n    };\r\n\r\n    return(\r\n        /** de navigation bar  tutorial: https://www.youtube.com/watch?v=-HEjsVkfjOk **/\r\n\r\n        <>\r\n            <Navbar bg={\"dark\"} variant={\"dark\"}\r\n                    sticky={\"top\"} expand={\"sm\"} >\r\n                <Container>\r\n                    <Navbar.Brand as={Link} to={\"/Login\"} style={{marginLeft: \"1rem\"}}>\r\n                        Role : Manager\r\n                    </Navbar.Brand>\r\n\r\n                    <Navbar.Toggle />\r\n                    <Navbar.Collapse id=\"responsive-navbar-nav\">\r\n                        <Nav className=\"me-auto\">\r\n                            <Nav.Link as={Link} to={\"/Spelers\"}>\r\n                                Spelers\r\n                            </Nav.Link>\r\n                            <Nav.Link as={Link} to={\"/Teams\"}>\r\n                                Teams\r\n                            </Nav.Link>\r\n                            <Nav.Link as={Link} to={\"/Matches\"}>\r\n                                Matches\r\n                            </Nav.Link>\r\n                        </Nav>\r\n                        <Nav >\r\n                            <Nav.Link as={Link} to={\"/Login\"}>Login</Nav.Link>\r\n\r\n                            <Nav.Link onClick={logout} >Logout</Nav.Link>\r\n                        </Nav>\r\n                    </Navbar.Collapse>\r\n                </Container>\r\n            </Navbar>\r\n            <Navbar bg={\"dark\"} variant={\"dark\"}\r\n                    sticky={\"top\"} expand={\"sm\"} >\r\n                <Container>\r\n                    <Navbar.Brand as={Link} to={\"/Login\"} style={{marginLeft: \"1rem\"}}>\r\n                        Role : Speler\r\n                    </Navbar.Brand>\r\n\r\n                    <Navbar.Toggle />\r\n                    <Navbar.Collapse id=\"responsive-navbar-nav\">\r\n                        <Nav className=\"me-auto\">\r\n                            <Nav.Link as={Link} to={\"/Spelers/0\"}>\r\n                                Speler gegevens\r\n                            </Nav.Link>\r\n                            <Nav.Link as={Link} to={\"/Teams\"}>\r\n                                Teams\r\n                            </Nav.Link>\r\n                            <Nav.Link as={Link} to={\"/SpelerMatchHist\"}>\r\n                                Matches\r\n                            </Nav.Link>\r\n                        </Nav>\r\n                    </Navbar.Collapse>\r\n                </Container>\r\n            </Navbar>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Header;","C:\\Users\\Gebruiker\\Desktop\\Graduaat programmeren\\GIP4\\frontend\\src\\Components\\Login.tsx",["97"],"import {Button, Col, Container, Form, FormControl, FormGroup, FormLabel} from \"react-bootstrap\";\r\nimport React, {ChangeEvent, useState} from \"react\";\r\nimport axios from \"axios\";\r\nimport {useNavigate} from \"react-router-dom\";\r\nimport Header from \"./Header\";\r\n\r\ninterface IUser{\r\n    username: string,\r\n    password: string\r\n}\r\n\r\nconst Login = () => {\r\n\r\n    let navigate = useNavigate();\r\n    const loginURL = 'http://localhost:8080/api/login/user'\r\n\r\n    const [user, setUser] = useState<IUser>(\r\n        {\r\n            username: '',\r\n            password: ''\r\n        }\r\n    );\r\n\r\n    // POST login speler\r\n    const PostLogin = async () => {\r\n        console.log(user)\r\n        await axios.post<IUser>(loginURL, user,{\r\n            auth:{\r\n                username: user.username,\r\n                password: user.password\r\n            },\r\n            withCredentials: true,\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                'Access-Control-Allow-Headers' : '*',\r\n                'Access-Control-Allow-Credentials': 'include'},\r\n\r\n        }).then((response) => {\r\n\r\n            console.log(\"Logged in\")\r\n            console.log(response.data);\r\n            navigate(\"/Spelers\")\r\n        }).catch(err => {\r\n            console.log(err);\r\n        });\r\n    };\r\n\r\n    const ChangeHandlerLogin = (event: ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {\r\n        setUser(prevUser => ({\r\n                ...prevUser,\r\n                [event.target.name]: event.target.value\r\n            })\r\n        )\r\n    }\r\n\r\n\r\n    return (\r\n        <>\r\n            <Container className=\"col-md-5\">\r\n                <Form>\r\n                    <FormGroup>\r\n                        <FormLabel>Username</FormLabel>\r\n                        <FormControl name=\"username\"\r\n                                     type=\"text\"\r\n                                     value={user.username}\r\n                                     onChange={ChangeHandlerLogin}\r\n                        />\r\n                    </FormGroup>\r\n                    <FormGroup>\r\n                        <FormLabel>Username</FormLabel>\r\n                        <FormControl name=\"password\"\r\n                                     type=\"password\"\r\n                                     value={user.password}\r\n                                     onChange={ChangeHandlerLogin}\r\n                        />\r\n                    </FormGroup>\r\n\r\n                    <Col lg=\"3\">\r\n                        <Button variant={\"primary\"}  onClick={() => PostLogin()}>\r\n                            Submit\r\n                        </Button>\r\n                    </Col>\r\n                </Form>\r\n            </Container>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Login","C:\\Users\\Gebruiker\\Desktop\\Graduaat programmeren\\GIP4\\frontend\\src\\Components\\Speler\\DelSpeler.tsx",["98"],"import {useNavigate, useParams} from \"react-router-dom\";\r\nimport React, {useEffect} from \"react\";\r\nimport axios from \"axios\";\r\nimport moment from 'moment';\r\nimport {Button, Container} from \"react-bootstrap\";\r\n\r\ninterface Speler {\r\n    id: number;\r\n    actief: boolean;\r\n    adresDTO: {\r\n        id: number;\r\n        gemeente: string;\r\n        straat: string;\r\n        huisnummer: string;\r\n        postcode:string;\r\n    }\r\n    geboortedatum: string;\r\n    userDTO: {\r\n        id: number;\r\n        achternaam: string;\r\n        email: string;\r\n        role: string;\r\n        username: string;\r\n        voornaam: string;\r\n    }\r\n}\r\n\r\n\r\nconst DelSpeler = () => {\r\n    let params = useParams();\r\n    let navigate = useNavigate();\r\n\r\n    const getSpelerURL = \"http://localhost:8080/api/spelers/\" + params.id + \"/getOne\";\r\n\r\n    const delSpelerURL = \"http://localhost:8080/api/spelers/\" + params.id + \"/delete\";\r\n\r\n    const [speler, setSpeler] = React.useState<Speler | any>(    {\r\n        id: 0,\r\n        actief: false,\r\n        adresDTO: {\r\n            id: 0,\r\n            gemeente:'',\r\n            straat:'',\r\n            huisnummer: '',\r\n            postcode:'',\r\n        },\r\n        geboortedatum: '',\r\n        userDTO: {\r\n            id: 0,\r\n            achternaam: '',\r\n            email: '',\r\n            role: '',\r\n            username: '',\r\n            voornaam: '',\r\n        }\r\n    });\r\n\r\n    // get spelers from api\r\n    useEffect(() => {\r\n        getSpelers();\r\n    }, []);\r\n\r\n    const getSpelers = async () => {\r\n        await axios.get<Speler>(getSpelerURL, {\r\n            withCredentials: true\r\n        }).then((response) =>{\r\n            console.log(response.data);\r\n            setSpeler(response.data);\r\n        })\r\n    }\r\n\r\n    const Delete = async () => {\r\n        await axios.put<Speler>(delSpelerURL, {},{\r\n            withCredentials: true\r\n        }).then((response) => {\r\n            getSpelers();\r\n            console.log(response.data)\r\n        })\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Container className=\"col-5 bg-dark text-white-50\">\r\n                <div>\r\n                    <br/>\r\n                    <h1>Speler: {speler.userDTO.username} </h1>\r\n                    <br/>\r\n                    <h3>Voornaam: {speler.userDTO.voornaam} </h3>\r\n                    <h3>Achternaam: {speler.userDTO.achternaam}</h3>\r\n                    <h3>Email: {speler.userDTO.email}</h3>\r\n                    <h3>Geboortedatum: {moment(speler.geboortedatum).format('DD/MM/YYYY')}</h3>\r\n                    <h3>Actief: {speler.actief ? \"true\": \"false\"} </h3>\r\n                    <br/>\r\n\r\n                    <h3>Adres </h3>\r\n                    <h4>Gemeente: {speler.adresDTO.gemeente}</h4>\r\n                    <h4>Postcode: {speler.adresDTO.postcode}</h4>\r\n                    <h4>Straat: {speler.adresDTO.straat}</h4>\r\n                    <h4>Huisnr.: {speler.adresDTO.huisnummer}</h4>\r\n\r\n                    <br/>\r\n\r\n                    {speler.actief?\r\n                        <Button variant={\"danger\"}  onClick={() => Delete()}>\r\n                            deactiveren\r\n                        </Button>\r\n                        :\r\n                        <Button variant={\"primary\"} onClick={() => Delete()}>\r\n                            Activeren\r\n                        </Button>\r\n                    }\r\n\r\n                    <div>\r\n                        <Button onClick={() => navigate(\"/Spelers/\" + speler.id)}>\r\n                            Cancel\r\n                        </Button>\r\n                    </div>\r\n                </div>\r\n            </Container>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default DelSpeler","C:\\Users\\Gebruiker\\Desktop\\Graduaat programmeren\\GIP4\\frontend\\src\\Components\\Speler\\Spelers.tsx",[],"C:\\Users\\Gebruiker\\Desktop\\Graduaat programmeren\\GIP4\\frontend\\src\\Components\\Speler\\AddSpeler.tsx",[],"C:\\Users\\Gebruiker\\Desktop\\Graduaat programmeren\\GIP4\\frontend\\src\\Components\\Speler\\Speler.tsx",["99"],"import {useNavigate, useParams} from \"react-router-dom\";\r\nimport React, {useEffect} from \"react\";\r\nimport axios from \"axios\";\r\nimport moment from 'moment';\r\nimport {Button, Container} from \"react-bootstrap\";\r\n\r\ninterface Speler {\r\n    id: number;\r\n    actief: boolean;\r\n    adresDTO: {\r\n        id: number;\r\n        gemeente: string;\r\n        straat: string;\r\n        huisnummer: string;\r\n        postcode:string;\r\n    }\r\n    geboortedatum: string;\r\n    userDTO: {\r\n        id: number;\r\n        achternaam: string;\r\n        email: string;\r\n        role: string;\r\n        username: string;\r\n        voornaam: string;\r\n    }\r\n}\r\n\r\n\r\nconst Speler = () => {\r\n    let params = useParams();\r\n    let navigate = useNavigate();\r\n\r\n    const getSpelerURL = \"http://localhost:8080/api/spelers/\" + params.id + \"/getOne\";\r\n\r\n    const [speler, setSpeler] = React.useState<Speler | any>(    {\r\n            id: 0,\r\n            actief: false,\r\n            adresDTO: {\r\n                id: 0,\r\n                gemeente:'',\r\n                straat:'',\r\n                huisnummer: '',\r\n                postcode:'',\r\n            },\r\n            geboortedatum: '',\r\n            userDTO: {\r\n                id: 0,\r\n                achternaam: '',\r\n                email: '',\r\n                role: '',\r\n                username: '',\r\n                voornaam: '',\r\n        }\r\n    });\r\n\r\n    // get spelers from api\r\n    useEffect(() => {\r\n        axios.get<Speler[]>(getSpelerURL, {\r\n            withCredentials : true\r\n        }).then((response) =>{\r\n            console.log(response.data);\r\n            setSpeler(response.data);\r\n        });\r\n    }, [getSpelerURL]);\r\n\r\n    return (\r\n            <>\r\n                <Container className=\"col-8 bg-dark text-white-50\" >\r\n                    <div>\r\n                        <br/>\r\n                        <h1>Speler: {speler.userDTO.username} </h1>\r\n                        <br/>\r\n                        <h3>Voornaam: {speler.userDTO.voornaam} </h3>\r\n                        <h3>Achternaam: {speler.userDTO.achternaam}</h3>\r\n                        <h3>Email: {speler.userDTO.email}</h3>\r\n                        <h3>Geboortedatum: {moment(speler.geboortedatum).format('DD/MM/YYYY')}</h3>\r\n                        <h3>Actief: {speler.actief ? \"true\": \"false\"} </h3>\r\n                        <br/>\r\n\r\n                        <h3>Adres </h3>\r\n                        <h4>Gemeente: {speler.adresDTO.gemeente}</h4>\r\n                        <h4>Postcode: {speler.adresDTO.postcode}</h4>\r\n                        <h4>Straat: {speler.adresDTO.straat}</h4>\r\n                        <h4>Huisnr.: {speler.adresDTO.huisnummer}</h4>\r\n\r\n                        <br/>\r\n                        <Button onClick={() => navigate(\"/Spelers\")}>\r\n                            Terug\r\n                        </Button>\r\n                        <Button onClick={() => navigate(\"/EditSpeler/\" + speler.id)}>\r\n                            Speler aanpassen\r\n                        </Button>\r\n                        <Button onClick={() => navigate(\"/DelSpeler/\" + speler.id)}>\r\n                            {speler.actief?\r\n                                \"Speler deactiveren\"\r\n                                :\r\n                                \"Speler activeren\"\r\n                            }\r\n                        </Button>\r\n                    </div>\r\n                </Container>\r\n            </>\r\n        )\r\n}\r\n\r\nexport default Speler","C:\\Users\\Gebruiker\\Desktop\\Graduaat programmeren\\GIP4\\frontend\\src\\Components\\Speler\\EditSpeler.tsx",["100"],"import React, {ChangeEvent, useEffect, useState} from \"react\";\r\nimport {useNavigate, useParams} from \"react-router-dom\";\r\nimport axios from \"axios\";\r\nimport {Button, Col, Container, Form, Row} from \"react-bootstrap\";\r\nimport moment from \"moment\";\r\n\r\ninterface Speler {\r\n    id: number;\r\n    actief: boolean;\r\n    adresDTO: {\r\n        id: number;\r\n        gemeente: string;\r\n        straat: string;\r\n        huisnummer: string;\r\n        postcode:string;\r\n    }\r\n    geboortedatum: string;\r\n    userDTO: {\r\n        id: number;\r\n        achternaam: string;\r\n        email: string;\r\n        role: string;\r\n        username: string;\r\n        voornaam: string;\r\n    }\r\n}\r\n\r\nconst EditSpeler = () => {\r\n    let params = useParams();\r\n    let navigate = useNavigate();\r\n\r\n    const getSpelerURL = \"http://localhost:8080/api/spelers/\" + params.id + \"/getOne\";\r\n\r\n    const postSpelerURL = \"http://localhost:8080/api/spelers/\" + params.id + \"/update\";\r\n\r\n\r\n    const [speler, setSpeler] = useState<Speler>(    {\r\n        id: 0,\r\n        actief: false,\r\n        adresDTO: {\r\n            id: 0,\r\n            gemeente:'',\r\n            straat:'',\r\n            huisnummer: '',\r\n            postcode:'',\r\n        },\r\n        geboortedatum: '',\r\n        userDTO: {\r\n            id: 0,\r\n            achternaam: '',\r\n            email: '',\r\n            role: '',\r\n            username: '',\r\n            voornaam: '',\r\n        }\r\n    });\r\n\r\n    // get spelers from api\r\n    useEffect(() => {\r\n        getSpelers();\r\n    }, []);\r\n\r\n    const getSpelers = async () => {\r\n        await axios.get<Speler>(getSpelerURL, {\r\n            withCredentials: true\r\n        }).then((response) =>{\r\n            console.log(response.data);\r\n            setSpeler(response.data);\r\n        })\r\n    }\r\n\r\n    // POST add speler\r\n    const PutSpeler = async () => {\r\n        console.log(speler)\r\n        await axios.put<Speler>(postSpelerURL, speler, {\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            },\r\n            withCredentials: true\r\n        }).then((response) => {\r\n            navigate(\"/Spelers/\" + speler.id);\r\n            console.log(response.data);\r\n        }).catch(err => {\r\n            console.log(err);\r\n        });\r\n    };\r\n\r\n    // de onChange functie voor speler\r\n    const ChangeHandlerSpeler = (event: ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {\r\n        setSpeler(prevSpeler => ({\r\n                ...prevSpeler,\r\n                [event.target.name]: event.target.value\r\n            })\r\n        )\r\n    }\r\n\r\n    // de onChange functie voor UserDTO\r\n    const ChangeHandlerUserDTO = (event: ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {\r\n        setSpeler(prevSpeler => ({\r\n                ...prevSpeler,\r\n                userDTO:{...prevSpeler.userDTO ,[event.target.name] : event.target.value}\r\n            })\r\n        )\r\n        console.log(speler);\r\n    }\r\n\r\n    // de onChange functie voor AdresDTO\r\n    const ChangeHandlerAdresDTO = (event: ChangeEvent<HTMLInputElement|HTMLTextAreaElement>) => {\r\n        setSpeler(prevCreateSpeler => ({\r\n                ...prevCreateSpeler,\r\n                adresDTO: {...prevCreateSpeler.adresDTO, [event.target.name]: event.target.value}\r\n            })\r\n        )\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Container className=\"col-md-5 bg-dark text-white-50\">\r\n                <h1>Speler aanpassen</h1>\r\n                <br/>\r\n                <Form>\r\n                    <Form.Group className={\"mb-3\"}>\r\n                        <Form.Label>Username</Form.Label>\r\n                        <Form.Control name=\"username\"\r\n                                      type={\"text\"}\r\n                                      placeholder=\"Username\"\r\n                                      value={speler?.userDTO.username}\r\n                                      onChange={ChangeHandlerUserDTO}\r\n                        />\r\n                    </Form.Group>\r\n\r\n                    <Row>\r\n                        <Col>\r\n                            <Form.Group className={\"mb-3\"}>\r\n                                <Form.Label>Voornaam</Form.Label>\r\n                                <Form.Control name=\"voornaam\"\r\n                                              type={\"text\"}\r\n                                              placeholder=\"Voornaam\"\r\n                                              value={speler?.userDTO.voornaam}\r\n                                              onChange={ChangeHandlerUserDTO}\r\n                                />\r\n\r\n                            </Form.Group>\r\n                        </Col>\r\n                        <Col>\r\n                            <Form.Group className={\"mb-3\"}>\r\n                                <Form.Label>Achternaam</Form.Label>\r\n                                <Form.Control name=\"achternaam\"\r\n                                              type={\"text\"}\r\n                                              placeholder=\"Achternaam\"\r\n                                              value={speler?.userDTO.achternaam}\r\n                                              onChange={ChangeHandlerUserDTO}\r\n                                />\r\n                            </Form.Group>\r\n                        </Col>\r\n                    </Row>\r\n\r\n                    <Form.Group className={\"mb-3\"}>\r\n                        <Form.Label>Email</Form.Label>\r\n                        <Form.Control name=\"email\"\r\n                                      type={\"email\"}\r\n                                      placeholder=\"Email\"\r\n                                      value={speler?.userDTO.email}\r\n                                      onChange={ChangeHandlerUserDTO}\r\n                        />\r\n                    </Form.Group>\r\n\r\n                    <Row>\r\n                        <Col>\r\n                            <Form.Group className={\"mb-3\"}>\r\n                                <Form.Label>Gemeente</Form.Label>\r\n                                <Form.Control name=\"gemeente\"\r\n                                              type={\"text\"}\r\n                                              placeholder=\"Gemeente\"\r\n                                              value={speler?.adresDTO.gemeente}\r\n                                              onChange={ChangeHandlerAdresDTO}\r\n                                />\r\n                            </Form.Group>\r\n                        </Col>\r\n                        <Col xs lg=\"3\">\r\n                            <Form.Group className={\"mb-3\"}>\r\n                                <Form.Label>Postcode</Form.Label>\r\n                                <Form.Control name=\"postcode\"\r\n                                              type={\"text\"}\r\n                                              placeholder=\"Postcode\"\r\n                                              value={speler?.adresDTO.postcode}\r\n                                              onChange={ChangeHandlerAdresDTO}\r\n                                />\r\n                            </Form.Group>\r\n                        </Col>\r\n                    </Row>\r\n\r\n                    <Row>\r\n                        <Col>\r\n                            <Form.Group className={\"mb-3\"}>\r\n                                <Form.Label>Straat</Form.Label>\r\n                                <Form.Control name=\"straat\"\r\n                                              type={\"text\"}\r\n                                              placeholder=\"Straat\"\r\n                                              value={speler?.adresDTO.straat}\r\n                                              onChange={ChangeHandlerAdresDTO}\r\n                                />\r\n                            </Form.Group>\r\n                        </Col>\r\n                        <Col xs lg=\"2\">\r\n                            <Form.Group className={\"mb-3\"}>\r\n                                <Form.Label >huisnr.</Form.Label>\r\n                                <Form.Control name=\"huisnummer\"\r\n                                              type={\"text\"}\r\n                                              value={speler?.adresDTO.huisnummer}\r\n                                              onChange={ChangeHandlerAdresDTO}\r\n                                />\r\n                            </Form.Group>\r\n                        </Col>\r\n                    </Row>\r\n\r\n                    <Form.Group className={\"mb-3\"}>\r\n                        <Form.Label>Geboortedatum</Form.Label>\r\n                        <Form.Control name=\"geboortedatum\"\r\n                                      type={\"date\"}\r\n                                      placeholder=\"geboortedatum\"\r\n                                      value={moment(speler.geboortedatum).format(\"yyyy-MM-DD\")}\r\n                                      onChange={ChangeHandlerSpeler}\r\n                        />\r\n                    </Form.Group>\r\n\r\n                    <Row className=\"justify-content-center\">\r\n                        <Col lg=\"3\">\r\n                            <Button variant={\"primary\"}  onClick={() => PutSpeler()}>\r\n                                Submit\r\n                            </Button>\r\n                        </Col>\r\n                        <Col>\r\n                            <Button onClick={() => navigate(\"/Spelers/\" + speler.id)}>\r\n                                Cancel\r\n                            </Button>\r\n                        </Col>\r\n                    </Row>\r\n                </Form>\r\n            </Container>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default EditSpeler","C:\\Users\\Gebruiker\\Desktop\\Graduaat programmeren\\GIP4\\frontend\\src\\Components\\Team\\Team.tsx",["101","102","103"],"C:\\Users\\Gebruiker\\Desktop\\Graduaat programmeren\\GIP4\\frontend\\src\\Components\\Team\\AddSpelerToTeam.tsx",["104","105","106","107","108","109","110"],"import {Link, useNavigate, useParams} from \"react-router-dom\";\r\nimport React, {ChangeEvent, useEffect, useState} from \"react\";\r\nimport axios from \"axios\";\r\nimport {Button, Col, Container, Form, Row, Table} from \"react-bootstrap\";\r\nimport {map} from \"react-bootstrap/ElementChildren\";\r\n\r\ninterface Team {\r\n    id : number\r\n    naam : string\r\n    actief : boolean\r\n    spelerDTO : SpelerDTO[]\r\n    managerDTO : {\r\n        id: number\r\n        userDTO: {\r\n            username: string\r\n        }\r\n    }\r\n}\r\n\r\ninterface SpelerDTO{\r\n    id : number\r\n    reserve : boolean\r\n    spelerid: number\r\n}\r\n\r\ninterface Speler {\r\n    id: number;\r\n    actief: boolean;\r\n    adresDTO: {\r\n        id: number;\r\n        gemeente: string;\r\n        straat: string;\r\n        huisnummer: string;\r\n        postcode:string;\r\n    }\r\n    geboortedatum: string;\r\n    userDTO: {\r\n        id: number;\r\n        achternaam: string;\r\n        email: string;\r\n        role: string;\r\n        username: string;\r\n        voornaam: string;\r\n    }\r\n}\r\n\r\nconst AddSpelerToTeam = () => {\r\n\r\n    let params = useParams();\r\n    let navigate = useNavigate();\r\n\r\n    // get Team\r\n    const getTeamURL = \"http://localhost:8080/api/teams/\" + params.id + \"/getOne\";\r\n    const [team, setTeam] = useState<Team>({\r\n        managerDTO: {id: 0, userDTO: {username: \"\"}},\r\n        spelerDTO: [],\r\n        actief: false,\r\n        naam: \"\",\r\n        id: 0\r\n        }\r\n    );\r\n\r\n    //get spelers\r\n    const getSpelersURL = \"http://localhost:8080/api/spelers\";\r\n    const [spelers, setSpelers] = React.useState<Speler[]>([]);\r\n\r\n\r\n    useEffect(() => {\r\n        getTeam();\r\n        getSpelers();\r\n    },[]);\r\n\r\n    const getTeam = () => {\r\n        axios.get<Team>(getTeamURL, {\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            },withCredentials : true\r\n        }).then((response) => {\r\n            setTeam(response.data);\r\n        }).catch(err => {\r\n            console.log(err);\r\n        });\r\n    }\r\n\r\n    const getSpelers = () => {\r\n        axios.get<Speler[]>(getSpelersURL, {\r\n            withCredentials: true\r\n        }).then((response) =>{\r\n            setSpelers(response.data);\r\n        }).catch((e) => {\r\n            console.log(e);\r\n        });\r\n    }\r\n\r\n\r\n    //add speler to team\r\n    const teamsURL = \"http://localhost:8080/api/teams\";\r\n    const PostAddSpeler = async (spelerId : number , reserve: boolean) => {\r\n        await axios.post<Team>(teamsURL + \"/\" + params.id + \"/AddSpeler/\"+  + spelerId + \"/\" + reserve,{}, {\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            },withCredentials : true\r\n        }).then((response) => {\r\n            getTeam();\r\n        }).catch(err => {\r\n            console.log(err);\r\n        });\r\n    };\r\n\r\n    const DeleteSpeler = (spelerid : number, teamid : number) => {\r\n        const deleteSpelerURL =  \"http://localhost:8080/api/teams/\" + teamid +\"/Delete/\" + spelerid\r\n        axios.delete(deleteSpelerURL, {\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            },withCredentials : true\r\n        }).then((response) => {\r\n            getTeam();\r\n        }).catch(err => {\r\n            console.log(err);\r\n        });\r\n    }\r\n\r\n    const ReservePromoveren = (spelerid : number, teamid : number) => {\r\n        const reservePromoverenURL =  \"http://localhost:8080/api/teams/\" + teamid +\"/ReservePromoveren/\" + spelerid\r\n        axios.put(reservePromoverenURL, {},{\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            },withCredentials : true\r\n        }).then((response) => {\r\n            getTeam();\r\n        }).catch(err => {\r\n            console.log(err);\r\n        });\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Container className=\"col-md-11 bg-dark text-white-50\">\r\n\r\n\r\n\r\n                <h1>team : {team.naam}</h1>\r\n                <br/>\r\n                <Button onClick={() => navigate(-1)}>Terug</Button>\r\n                <h2>manager: {team.managerDTO.userDTO.username} </h2>\r\n                <h2>Spelers : </h2>\r\n\r\n                <Table striped bordered hover variant={'dark'}>\r\n                    <thead>\r\n                    <tr>\r\n                        <th>id</th>\r\n                        <th>username</th>\r\n                        <th>voornaam</th>\r\n                        <th>achternaam</th>\r\n                        <th className=\"col-md-2\"></th>\r\n                        <th className=\"col-md-2\"></th>\r\n                    </tr>\r\n                    </thead>\r\n\r\n                    <tbody>\r\n                    {\r\n                        spelers.map(speler => (\r\n                                team.spelerDTO.some(spelerDTO => spelerDTO.spelerid === speler.id && !spelerDTO.reserve) ?\r\n                                    <tr key={speler.id}>\r\n                                        <td>{speler.id}</td>\r\n                                        <td>{speler.userDTO.username}</td>\r\n                                        <td>{speler.userDTO.voornaam}</td>\r\n                                        <td>{speler.userDTO.achternaam}</td>\r\n                                        <td><Button onClick={() => ReservePromoveren(speler.id, team.id)}> degraderen </Button></td>\r\n                                        <td><Button onClick={() => DeleteSpeler(speler.id, team.id)}> Verwijderen </Button></td>\r\n                                    </tr>\r\n                            : \"\"\r\n                            )\r\n                        )\r\n                    }\r\n\r\n                    </tbody>\r\n                </Table>\r\n\r\n                <h2>Reserve spelers :</h2>\r\n\r\n                <Table striped bordered hover variant={'dark'}>\r\n                    <thead>\r\n                    <tr>\r\n                        <th>id</th>\r\n                        <th>username</th>\r\n                        <th>voornaam</th>\r\n                        <th>achternaam</th>\r\n                        <th className=\"col-md-2\"></th>\r\n                        <th className=\"col-md-2\"></th>\r\n                    </tr>\r\n                    </thead>\r\n\r\n                    <tbody>\r\n                    {\r\n                        spelers.map(speler => (\r\n                                team.spelerDTO.some(spelerDTO => spelerDTO.spelerid === speler.id && spelerDTO.reserve) ?\r\n                                    <tr key={speler.id}>\r\n                                        <td>{speler.id}</td>\r\n                                        <td>{speler.userDTO.username}</td>\r\n                                        <td>{speler.userDTO.voornaam}</td>\r\n                                        <td>{speler.userDTO.achternaam}</td>\r\n                                        <td><Button onClick={() => ReservePromoveren(speler.id, team.id)}> Promoveren </Button></td>\r\n                                        <td><Button onClick={() => DeleteSpeler(speler.id, team.id)}> Verwijderen </Button></td>\r\n                                    </tr>\r\n                                    : \"\"\r\n                            )\r\n                        )\r\n                    }\r\n\r\n                    </tbody>\r\n                </Table>\r\n\r\n\r\n                <h2>Spelers Toevoegen</h2>\r\n\r\n                <Table striped bordered hover variant={'dark'}>\r\n                    <thead>\r\n                    <tr>\r\n                        <th>id</th>\r\n                        <th>username</th>\r\n                        <th>voornaam</th>\r\n                        <th>achternaam</th>\r\n                        <th className=\"col-md-1\"> speler </th>\r\n                        <th className=\"col-md-1\"> reserve </th>\r\n                    </tr>\r\n                    </thead>\r\n\r\n                    <tbody>\r\n                    {\r\n                        spelers.map(speler => (\r\n                            speler.actief?\r\n                            team.spelerDTO.some(spelerDTO => spelerDTO.spelerid === speler.id) ? \"\" :\r\n                                <tr key={speler.id}>\r\n                                    <td>{speler.id}</td>\r\n                                    <td>{speler.userDTO.username}</td>\r\n                                    <td>{speler.userDTO.voornaam}</td>\r\n                                    <td>{speler.userDTO.achternaam}</td>\r\n                                    <td><Button className=\"btn-success\" onClick={() => PostAddSpeler(speler.id, false)}> + </Button></td>\r\n                                    <td><Button className=\"btn-warning\" onClick={() => PostAddSpeler(speler.id, true)}> + </Button></td>\r\n                                </tr>\r\n                                : \"\"\r\n                            )\r\n                        )\r\n                    }\r\n\r\n                    </tbody>\r\n                </Table>\r\n\r\n\r\n            </Container>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default AddSpelerToTeam","C:\\Users\\Gebruiker\\Desktop\\Graduaat programmeren\\GIP4\\frontend\\src\\Components\\Team\\AddTeam.tsx",[],"C:\\Users\\Gebruiker\\Desktop\\Graduaat programmeren\\GIP4\\frontend\\src\\Components\\Team\\Teams.tsx",["111"],"import user from \"../Login\";\r\nimport React from \"react\";\r\nimport axios from \"axios\";\r\nimport {Link} from \"react-router-dom\";\r\nimport {Container, Table} from \"react-bootstrap\";\r\n\r\nconst getTeamsURL = \"http://localhost:8080/api/teams\";\r\n\r\ninterface Team {\r\n    id: number\r\n    naam : string,\r\n    managerDTO : {\r\n        userDTO: {\r\n            username: string,\r\n        }\r\n    },\r\n    actief: boolean,\r\n}\r\n\r\nconst Teams = () => {\r\n\r\n    const [teams, setTeams] = React.useState<Team[]>([]);\r\n\r\n    React.useEffect(() => {\r\n        axios.get<Team[]>(getTeamsURL, {\r\n            withCredentials: true\r\n        }).then((response) =>{\r\n            console.log(response.data);\r\n            setTeams(response.data);\r\n        }).catch((e) => {\r\n            console.log(e);\r\n        });\r\n    }, []);\r\n\r\n    if(!teams) return null;\r\n\r\n    return(\r\n        <>\r\n            <Container className=\"bg-dark text-white-50\">\r\n                <h1>Teams</h1>\r\n                <br/>\r\n                <Link to={\"/AddTeam\"}>Team toevoegen</Link>\r\n                <br/>\r\n                <br/>\r\n                <Table striped bordered hover variant={'dark'}>\r\n                    <thead>\r\n                    <tr>\r\n                        <th>id</th>\r\n                        <th>naam</th>\r\n                        <th>manager</th>\r\n                        <th>actief</th>\r\n                        <th> </th>\r\n                    </tr>\r\n                    </thead>\r\n\r\n                    <tbody>\r\n                    {\r\n                        teams.map(team => (\r\n                            <tr key={team.id}>\r\n                                <td>{team.id}</td>\r\n                                <td>{team.naam}</td>\r\n                                <td>{team.managerDTO.userDTO.username}</td>\r\n                                <td>{team.actief ? \"Ja\" : \"Nee\" }</td>\r\n                                <td><Link to={\"/Teams/\" + team.id}>Details</Link></td>\r\n                            </tr>\r\n                        ))\r\n                    }\r\n                    </tbody>\r\n                </Table>\r\n            </Container>\r\n\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Teams","C:\\Users\\Gebruiker\\Desktop\\Graduaat programmeren\\GIP4\\frontend\\src\\Components\\Match\\Matches.tsx",["112"],"import user from \"../Login\";\r\nimport React from \"react\";\r\nimport axios from \"axios\";\r\nimport {Link} from \"react-router-dom\";\r\nimport {Container, Table} from \"react-bootstrap\";\r\nimport moment from \"moment\";\r\n\r\nconst getSpelersURL = \"http://localhost:8080/api/matches\";\r\n\r\ninterface Match {\r\n    id : number\r\n    teamBlue : Team\r\n    teamRed : Team\r\n    scoreBlueTeam : number\r\n    scoreRedTeam : number\r\n    datumtijd: Date\r\n}\r\n\r\ninterface Team {\r\n    id : number\r\n    naam : string\r\n    actief : boolean\r\n    managerDTO : {\r\n        id: number\r\n        userDTO: {\r\n            achternaam: string\r\n            email: string\r\n            id: number\r\n            role: string\r\n            username: string\r\n            voornaam: string\r\n        }\r\n    }\r\n    spelerDTO : SpelerDTO[]\r\n}\r\n\r\ninterface SpelerDTO{\r\n    id : number\r\n    reserve : boolean\r\n    spelerid: number\r\n}\r\n\r\nconst Matches = () => {\r\n    const [matches, setMatches] = React.useState<Match[]>([]);\r\n\r\n    // get spelers from api\r\n    React.useEffect(() => {\r\n        axios.get<Match[]>(getSpelersURL, {\r\n            withCredentials: true\r\n        }).then((response) =>{\r\n            console.log(response.data);\r\n            setMatches(response.data);\r\n        }).catch((e) => {\r\n            console.log(e);\r\n        });\r\n    }, []);\r\n\r\n    if(!matches) return null;\r\n\r\n    return(\r\n        <>\r\n\r\n            <Container className=\"bg-dark text-white-50\">\r\n                <h1>Matches</h1>\r\n                <br/>\r\n                <Link to={\"/AddMatch\"}>Match aanmaken</Link>\r\n                <br/>\r\n                <br/>\r\n                <Table striped bordered hover variant={'dark'}>\r\n                    <thead>\r\n                    <tr>\r\n                        <th className=\"col-md-0\">id</th>\r\n                        <th className=\"col-md-3\">Team Blue</th>\r\n                        <th className=\"col-md-3\">Team Red</th>\r\n                        <th>won</th>\r\n                        <th className=\"col-md-0\">blue - red</th>\r\n                        <th className=\"col-md-2\">datum en tijd</th>\r\n                        <th className=\"col-md-2\"> </th>\r\n                    </tr>\r\n                    </thead>\r\n\r\n                    <tbody>\r\n                    {\r\n                        matches.map(match => (\r\n                            <tr key={match.id}>\r\n                                <td>{match.id}</td>\r\n                                <td>{match.teamBlue.naam}</td>\r\n                                <td>{match.teamRed.naam}</td>\r\n                                <td>{\r\n                                    match.scoreRedTeam === 0 && match.scoreBlueTeam === 0 ? \"---\":\r\n                                    match.scoreRedTeam < match.scoreBlueTeam ? match.teamBlue.naam :  match.teamRed.naam\r\n                                }\r\n                                </td>\r\n                                <td>{match.scoreBlueTeam} - {match.scoreRedTeam}</td>\r\n                                <td>{moment(match.datumtijd).format('DD-MM-YYYY hh:mm')}</td>\r\n                                <td><Link to={\"/Matches/\" + match.id}>Details & Score</Link></td>\r\n                            </tr>\r\n                        ))\r\n                    }\r\n                    </tbody>\r\n                </Table>\r\n            </Container>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Matches","C:\\Users\\Gebruiker\\Desktop\\Graduaat programmeren\\GIP4\\frontend\\src\\Components\\Match\\AddMatch.tsx",["113","114"],"import React, {useEffect, useState} from \"react\";\r\nimport axios from \"axios\";\r\nimport {Button, Col, Container, Form, Row, Table} from \"react-bootstrap\";\r\nimport DateTimePicker from 'react-datetime-picker';\r\nimport {useNavigate} from \"react-router-dom\";\r\n\r\ninterface Team {\r\n    id : number\r\n    naam : string\r\n    actief : boolean\r\n    spelerDTO : SpelerDTO[]\r\n    managerDTO : {\r\n        id: number\r\n        userDTO: {\r\n            username: string\r\n        }\r\n    }\r\n}\r\n\r\ninterface SpelerDTO{\r\n    id : number\r\n    reserve : boolean\r\n    spelerid: number\r\n}\r\n\r\ninterface Speler {\r\n    id: number;\r\n    actief: boolean;\r\n    adresDTO: {\r\n        id: number;\r\n        gemeente: string;\r\n        straat: string;\r\n        huisnummer: string;\r\n        postcode:string;\r\n    }\r\n    geboortedatum: string;\r\n    userDTO: {\r\n        id: number;\r\n        achternaam: string;\r\n        email: string;\r\n        role: string;\r\n        username: string;\r\n        voornaam: string;\r\n    }\r\n}\r\n\r\ninterface createMatchDTO {\r\n    teamBlueId: number\r\n    teamRedId: number\r\n    spelers : SpelerMatchDTO[]\r\n    datumtijd: Date\r\n}\r\n\r\ninterface SpelerMatchDTO {\r\n    spelerid: number\r\n    teamid: number\r\n}\r\n\r\nconst AddMatch = () => {\r\n\r\n    let navigate = useNavigate();\r\n\r\n    //get all teams\r\n    const getAllTeamsURL = \"http://localhost:8080/api/teams/\";\r\n    const [allTeams, setAllTeams]   = useState<Team[]>([])\r\n\r\n    //set team blue\r\n    const [teamBlue, setTeamBlue] = useState<Team>({\r\n            managerDTO: {id: 0, userDTO: {username: \"\"}},\r\n            spelerDTO: [],\r\n            actief: false,\r\n            naam: \"\",\r\n            id: 0\r\n        }\r\n    );\r\n\r\n    //set team red\r\n    const [teamRed, setTeamRed] = useState<Team>({\r\n            managerDTO: {id: 0, userDTO: {username: \"\"}},\r\n            spelerDTO: [],\r\n            actief: false,\r\n            naam: \"\",\r\n            id: 0\r\n        }\r\n    );\r\n\r\n    //set Match\r\n    const addMatchURL = \"http://localhost:8080/api/matches/\";\r\n    const [match, setMatch] = useState<createMatchDTO>({\r\n        datumtijd: new Date(),\r\n        spelers: [],\r\n        teamBlueId: 0,\r\n        teamRedId: 0\r\n    });\r\n\r\n    //get all spelers\r\n    const getAllSpelersURL = \"http://localhost:8080/api/spelers\";\r\n    const [allSpelers, setAllSpelers] = React.useState<Speler[]>([]);\r\n\r\n\r\n    useEffect(() => {\r\n        getAllTeams()\r\n        getSpelers()\r\n\r\n    },[]);\r\n\r\n\r\n    //get all teams api\r\n    const getAllTeams = () => {\r\n        axios.get<Team[]>(getAllTeamsURL, {\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            },withCredentials : true\r\n        }).then((response) => {\r\n            console.log(response.data);\r\n            setAllTeams(response.data);\r\n        }).catch(err => {\r\n            console.log(err);\r\n        });\r\n    }\r\n\r\n    const getSpelers = () => {\r\n        axios.get<Speler[]>(getAllSpelersURL, {\r\n            withCredentials: true\r\n        }).then((response) =>{\r\n            setAllSpelers(response.data);\r\n        }).catch((e) => {\r\n            console.log(e);\r\n        });\r\n    }\r\n\r\n    const matchAanmaken = async () => {\r\n      await axios.post<createMatchDTO>(addMatchURL, match,{\r\n            withCredentials: true\r\n        }).then((response) =>{\r\n            console.log(response);\r\n        }).catch((e) => {\r\n            console.log(e);\r\n        });\r\n    }\r\n\r\n    const resetTeamBlue = (t : Team) => {\r\n        match.spelers = [];\r\n        setMatch(prevMatch => ({...prevMatch ,teamBlueId : t.id}));\r\n        setTeamBlue(t);\r\n    }\r\n\r\n    const resetTeamRed = (t : Team) => {\r\n        match.spelers = [];\r\n        setMatch(prevMatch => ({...prevMatch ,teamRedId : t.id}));\r\n        setTeamRed(t);\r\n    }\r\n\r\n    const addToSpelerMatch = (spelerid: number, teamid: number) => {\r\n        if(match.spelers.length == 0){\r\n            match.spelers.push({spelerid: spelerid, teamid: teamid})\r\n        }else{\r\n            if(match.spelers.some(speler => speler.spelerid === spelerid)){\r\n\r\n            }else{\r\n                match.spelers.push({spelerid: spelerid, teamid: teamid})\r\n            }\r\n        }\r\n        getSpelers();\r\n    }\r\n\r\n    const ChangeHandlerMatch = (time: Date) => {\r\n        setMatch(prevMatch => ({\r\n                ...prevMatch,\r\n                datumtijd : time\r\n            })\r\n        )\r\n    }\r\n\r\n    const isReserve = (spelers : SpelerDTO | undefined) => {\r\n        if(spelers?.reserve){\r\n            return \"ja\"\r\n        }\r\n        return \"nee\";\r\n    }\r\n\r\n    const RemoveSpeler = (spelerid : number, teamid: number) => {\r\n        setMatch(prevMatch => ({\r\n                ...prevMatch,\r\n                spelers :  match.spelers.filter(speler => speler.spelerid !== spelerid)\r\n            })\r\n        )\r\n        getSpelers();\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Container className=\"bg-dark text-white-50\">\r\n                <h1 className=\"altColor\">Match aanmaken</h1>\r\n                <br/>\r\n                <Row>\r\n                    <Col>\r\n                        {/* add teams */}\r\n                        <h1>Teams toevoegen</h1>\r\n                        <Table striped bordered hover variant={'dark'}>\r\n                            <thead>\r\n                            <tr>\r\n                                <th>id</th>\r\n                                <th>Team naam</th>\r\n                                <th className=\"col-md-2\"> </th>\r\n                                <th className=\"col-md-2 \"></th>\r\n                            </tr>\r\n                            </thead>\r\n\r\n                            <tbody>\r\n                            {\r\n                                allTeams.map(team => (\r\n                                    team.id !== teamBlue.id && team.id !== teamRed.id ?\r\n                                        <tr key={team.id}>\r\n                                            <td>{team.id}</td>\r\n                                            <td>{team.naam}</td>\r\n                                            <td><Button onClick={(e) => resetTeamBlue(team)}>blue team</Button></td>\r\n                                            <td><Button className=\"btn-danger\" onClick={(e) => resetTeamRed(team)}>red team</Button></td>\r\n                                        </tr> : \" \"\r\n                                ))\r\n                            }\r\n                            </tbody>\r\n                        </Table>\r\n                    </Col>\r\n                </Row>\r\n                <Row>\r\n                    <Col>\r\n                        {/* selected blue team*/}\r\n                        <h1>blue team</h1>\r\n                        <h2>{teamBlue.naam}</h2>\r\n                        <br/>\r\n                        <h2>Spelers : </h2>\r\n\r\n                        <Table striped bordered hover variant={'dark'}>\r\n                            <thead>\r\n                            <tr>\r\n                                <th>id</th>\r\n                                <th>username</th>\r\n                                <th>reserve</th>\r\n                                <th className=\"col-md-1\"> </th>\r\n                            </tr>\r\n                            </thead>\r\n\r\n                            <tbody>\r\n                            {\r\n                                allSpelers.map(speler => (\r\n                                        teamBlue.spelerDTO.some(spelerDTO => spelerDTO.spelerid === speler.id) && !match.spelers.some(sp => sp.spelerid === speler.id && (sp.teamid === teamRed.id || teamBlue.id)) ?\r\n                                            <tr key={speler.id}>\r\n                                                <td>{speler.id}</td>\r\n                                                <td>{speler.userDTO.username}</td>\r\n                                                <td>{isReserve(teamBlue.spelerDTO.find(sp => sp.spelerid === speler.id))}</td>\r\n                                                <td><Button className=\"btn-success\" onClick={() => addToSpelerMatch(speler.id, teamBlue.id)} >+</Button></td>\r\n                                            </tr>\r\n                                            : \"\"\r\n                                    )\r\n                                )\r\n                            }\r\n                            </tbody>\r\n                        </Table>\r\n\r\n\r\n                    </Col>\r\n                    <Col>\r\n                        {/* selected red team*/}\r\n                        <h1>red team</h1>\r\n                        <h2>{teamRed.naam}</h2>\r\n                        <br/>\r\n                        <h2>Spelers : </h2>\r\n\r\n                        <Table striped bordered hover variant={'dark'}>\r\n                            <thead>\r\n                            <tr>\r\n                                <th>id</th>\r\n                                <th>username</th>\r\n                                <th>reserve</th>\r\n                                <th className=\"col-md-1\"> </th>\r\n                            </tr>\r\n                            </thead>\r\n\r\n                            <tbody>\r\n                            {\r\n                                allSpelers.map(speler => (\r\n                                        teamRed.spelerDTO.some(spelerDTO => spelerDTO.spelerid === speler.id) && !match.spelers.some(sp => sp.spelerid === speler.id && (sp.teamid === teamRed.id || teamBlue.id)) ?\r\n                                            <tr key={speler.id}>\r\n                                                <td>{speler.id}</td>\r\n                                                <td>{speler.userDTO.username}</td>\r\n                                                <td>{isReserve(teamBlue.spelerDTO.find(sp => sp.spelerid === speler.id))}</td>\r\n\r\n                                                <td><Button className=\"btn-success\" onClick={() => addToSpelerMatch(speler.id, teamRed.id)} >+</Button></td>\r\n\r\n                                            </tr>\r\n                                            : \"\"\r\n                                    )\r\n                                )\r\n                            }\r\n                            </tbody>\r\n                        </Table>\r\n                    </Col>\r\n                </Row>\r\n\r\n                <Row>\r\n                    <Col>\r\n                        {/* selected players blue team*/}\r\n                        <h2>Selectie : </h2>\r\n\r\n                        <Table striped bordered hover variant={'dark'}>\r\n                            <thead>\r\n                            <tr>\r\n                                <th>id</th>\r\n                                <th>username</th>\r\n                                <th>reserve</th>\r\n                                <th className=\"col-md-1\"></th>\r\n                            </tr>\r\n                            </thead>\r\n\r\n                            <tbody>\r\n                            {\r\n                                allSpelers.map(speler => (\r\n                                        teamBlue.spelerDTO.some(spelerDTO => spelerDTO.spelerid === speler.id) && match.spelers.some(sp => sp.spelerid === speler.id && sp.teamid === teamBlue.id) ?\r\n                                            <tr key={speler.id}>\r\n                                                <td>{speler.id}</td>\r\n                                                <td>{speler.userDTO.username}</td>\r\n                                                <td>{isReserve(teamBlue.spelerDTO.find(sp => sp.spelerid === speler.id))}</td>\r\n                                                <td><Button className=\"btn-danger\" onClick={() => RemoveSpeler(speler.id, teamRed.id)} >-</Button></td>\r\n                                            </tr>\r\n                                            : \"\"\r\n                                    )\r\n                                )\r\n                            }\r\n                            </tbody>\r\n                        </Table>\r\n                    </Col>\r\n                    <Col>\r\n                        {/* selected players red team*/}\r\n\r\n                        <h2>Selectie : </h2>\r\n\r\n                        <Table striped bordered hover variant={'dark'}>\r\n                            <thead>\r\n                            <tr>\r\n                                <th>id</th>\r\n                                <th>username</th>\r\n                                <th>reserve</th>\r\n                                <th className=\"col-md-1\"></th>\r\n                            </tr>\r\n                            </thead>\r\n\r\n                            <tbody>\r\n                            {\r\n                                allSpelers.map(speler => (\r\n                                        teamRed.spelerDTO.some(spelerDTO => spelerDTO.spelerid === speler.id) && match.spelers.some(sp => sp.spelerid === speler.id && sp.teamid === teamRed.id)?\r\n                                            <tr key={speler.id}>\r\n                                                <td>{speler.id}</td>\r\n                                                <td>{speler.userDTO.username}</td>\r\n                                                <td>{isReserve(teamBlue.spelerDTO.find(sp => sp.spelerid === speler.id))}</td>\r\n                                                <td><Button className=\"btn-danger\" onClick={() => RemoveSpeler(speler.id, teamRed.id)} >-</Button></td>\r\n                                            </tr>\r\n                                            : \"\"\r\n                                    )\r\n                                )\r\n                            }\r\n                            </tbody>\r\n                        </Table>\r\n                    </Col>\r\n                </Row>\r\n                <div>\r\n                <h3>Datum en tijd</h3>\r\n\r\n                    <DateTimePicker className=\"bg-danger\"\r\n                                    value={match.datumtijd}\r\n                                    onChange={ChangeHandlerMatch}\r\n                                    disableClock={true}\r\n                    />\r\n                </div>\r\n                <br/>\r\n                <Button onClick={() => matchAanmaken()}> Match aanmaken</Button>\r\n                <Button onClick={() => navigate(\"/Matches\")}>Terug</Button>\r\n            </Container>\r\n        </>\r\n    )\r\n\r\n}\r\n\r\nexport default AddMatch","C:\\Users\\Gebruiker\\Desktop\\Graduaat programmeren\\GIP4\\frontend\\src\\Components\\Match\\Match.tsx",["115","116"],"import {Button, Col, Container, Form, Row, Table} from \"react-bootstrap\";\r\nimport React, {ChangeEvent, useState} from \"react\";\r\nimport axios from \"axios\";\r\nimport {useNavigate, useParams} from \"react-router-dom\";\r\n\r\n\r\ninterface MatchDTO {\r\n    id: number\r\n    teamBlue : Team\r\n    teamRed : Team\r\n    scoreBlueTeam : number\r\n    scoreRedTeam : number\r\n    datumtijd : string\r\n    spelers : SpelerMatchDTO[]\r\n}\r\n\r\ninterface SpelerMatchDTO {\r\n    spelerid: number\r\n    teamid: number\r\n}\r\n\r\n\r\ninterface Speler {\r\n    id: number;\r\n    actief: boolean;\r\n    adresDTO: {\r\n        id: number;\r\n        gemeente: string;\r\n        straat: string;\r\n        huisnummer: string;\r\n        postcode:string;\r\n    }\r\n    geboortedatum: string;\r\n    userDTO: {\r\n        id: number;\r\n        achternaam: string;\r\n        email: string;\r\n        role: string;\r\n        username: string;\r\n        voornaam: string;\r\n    }\r\n}\r\n\r\ninterface Team {\r\n    id : number\r\n    naam : string\r\n    actief : boolean\r\n    spelerDTO : SpelerDTO[]\r\n    managerDTO : {\r\n        id: number\r\n        userDTO: {\r\n            username: string\r\n        }\r\n    }\r\n}\r\n\r\ninterface SpelerDTO{\r\n    id : number\r\n    reserve : boolean\r\n    spelerid: number\r\n}\r\n\r\nconst Match = () => {\r\n\r\n    let navigate = useNavigate();\r\n    let params = useParams();\r\n    const getMatchURL = \"http://localhost:8080/api/matches/\" + params.id\r\n    const [match, setMatch] = React.useState<MatchDTO>({\r\n        spelers: [],\r\n        datumtijd: \"\",\r\n        id: 0,\r\n        scoreBlueTeam: 0,\r\n        scoreRedTeam: 0,\r\n        teamBlue:  {\r\n            id : 0,\r\n            naam : \"\",\r\n            actief : false,\r\n            spelerDTO : [],\r\n            managerDTO : {\r\n                id: 0,\r\n                userDTO: {\r\n                    username: \"\"\r\n                }\r\n            }\r\n        },\r\n        teamRed:  {\r\n            id : 0,\r\n            naam : \"\",\r\n            actief : false,\r\n            spelerDTO : [],\r\n            managerDTO : {\r\n                id: 0,\r\n                userDTO: {\r\n                    username: \"\"\r\n                }\r\n            }\r\n        }});\r\n\r\n    //get all spelers\r\n    const getAllSpelersURL = \"http://localhost:8080/api/spelers\";\r\n    const [allSpelers, setAllSpelers] = React.useState<Speler[]>([]);\r\n\r\n    React.useEffect(() => {\r\n        axios.get<MatchDTO>(getMatchURL, {\r\n            withCredentials: true\r\n        }).then((response) =>{\r\n            console.log(response.data);\r\n            setMatch(response.data);\r\n        }).catch((e) => {\r\n            console.log(e);\r\n        });\r\n\r\n        getSpelers();\r\n        console.log(match)\r\n    }, []);\r\n\r\n    const getSpelers = () => {\r\n        axios.get<Speler[]>(getAllSpelersURL, {\r\n            withCredentials: true\r\n        }).then((response) =>{\r\n            setAllSpelers(response.data);\r\n        }).catch((e) => {\r\n            console.log(e);\r\n        });\r\n    }\r\n\r\n    const isReserve = (spelers : SpelerDTO | undefined) => {\r\n        if(spelers?.reserve){\r\n            return \"ja\"\r\n        }\r\n        return \"nee\";\r\n    }\r\n\r\n    // de onChange functie voor speler\r\n    const ChangeHandlerScore = (event: ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {\r\n        setMatch(prevMatch => ({\r\n                ...prevMatch,\r\n                [event.target.name]: event.target.value\r\n            })\r\n        )\r\n    }\r\n\r\n\r\n    const PostScoreURL = \"http://localhost:8080/api/matches/matchresult\";\r\n    const addScore = () => {\r\n        axios.put<MatchDTO>(PostScoreURL, match ,{\r\n            withCredentials: true\r\n        }).then((response) =>{\r\n            console.log(response)\r\n        }).catch((e) => {\r\n            console.log(e);\r\n        });\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Container className=\"bg-dark text-white-50\">\r\n                <h1>{match.id}</h1>\r\n\r\n                <Row>\r\n                    <Col>\r\n                        {/* selected blue team*/}\r\n                        <h1>blue team</h1>\r\n                        <h2>{match.teamBlue.naam}</h2>\r\n                        <h2>manager : {match.teamBlue.managerDTO.userDTO.username} </h2>\r\n                        <br/>\r\n                        <h2>Spelers : </h2>\r\n\r\n                        <Table striped bordered hover variant={'dark'}>\r\n                            <thead>\r\n                            <tr>\r\n                                <th>id</th>\r\n                                <th>username</th>\r\n                                <th>reserve</th>\r\n                            </tr>\r\n                            </thead>\r\n\r\n                            <tbody>\r\n                            {\r\n                                allSpelers.map(speler => (\r\n                                        match.teamBlue.spelerDTO.some(spelerDTO => spelerDTO.spelerid === speler.id) && !match.spelers.some(sp => sp.spelerid === speler.id && (sp.teamid === match.teamBlue.id)) ?\r\n                                            <tr key={speler.id}>\r\n                                                <td>{speler.id}</td>\r\n                                                <td>{speler.userDTO.username}</td>\r\n                                                <td>{isReserve(match.teamBlue.spelerDTO.find(sp => sp.spelerid === speler.id))}</td>\r\n                                            </tr>\r\n                                            : \"\"\r\n                                    )\r\n                                )\r\n                            }\r\n                            </tbody>\r\n                        </Table>\r\n\r\n\r\n\r\n                    </Col>\r\n                    <Col>\r\n                        {/* selected red team*/}\r\n                        <h1>red team</h1>\r\n                        <h2>{match.teamRed.naam}</h2>\r\n                        <h2>manager : {match.teamRed.managerDTO.userDTO.username} </h2>\r\n\r\n                        <br/>\r\n                        <h2>Spelers : </h2>\r\n\r\n                        <Table striped bordered hover variant={'dark'}>\r\n                            <thead>\r\n                            <tr>\r\n                                <th>id</th>\r\n                                <th>username</th>\r\n                                <th>reserve</th>\r\n                            </tr>\r\n                            </thead>\r\n\r\n                            <tbody>\r\n                            {\r\n                                allSpelers.map(speler => (\r\n                                        match.teamRed.spelerDTO.some(spelerDTO => spelerDTO.spelerid === speler.id) && match.spelers.some(sp => sp.spelerid === speler.id && sp.teamid === match.teamRed.id) ?\r\n                                            <tr key={speler.id}>\r\n                                                <td>{speler.id}</td>\r\n                                                <td>{speler.userDTO.username}</td>\r\n                                                <td>{isReserve(match.teamBlue.spelerDTO.find(sp => sp.spelerid === speler.id))}</td>\r\n                                            </tr>\r\n                                            : \"\"\r\n                                    )\r\n                                )\r\n                            }\r\n                            </tbody>\r\n                        </Table>\r\n\r\n\r\n                    </Col>\r\n                </Row>\r\n\r\n                <Row>\r\n                    <Col>\r\n                        <Form.Group className={\"mb-3\"}>\r\n                            <Form.Label>Score Blue team</Form.Label>\r\n                            <Form.Control name=\"scoreBlueTeam\"\r\n                                          type={\"text\"}\r\n                                          placeholder=\"Score\"\r\n                                          value={match.scoreBlueTeam}\r\n                                          onChange={ChangeHandlerScore}\r\n                            />\r\n                        </Form.Group>\r\n                    </Col>\r\n                    <Col>\r\n                        <Form.Group className={\"mb-3\"}>\r\n                            <Form.Label>Score Red team</Form.Label>\r\n                            <Form.Control name=\"scoreRedTeam\"\r\n                                          type={\"text\"}\r\n                                          placeholder=\"Score\"\r\n                                          value={match.scoreRedTeam}\r\n                                          onChange={ChangeHandlerScore}\r\n                            />\r\n                        </Form.Group>\r\n                    </Col>\r\n                </Row>\r\n\r\n                <Button onClick={addScore}>set Score</Button>\r\n\r\n                <Button onClick={() => navigate(-1)}>\r\n                    Terug\r\n                </Button>\r\n            </Container>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Match","C:\\Users\\Gebruiker\\Desktop\\Graduaat programmeren\\GIP4\\frontend\\src\\Components\\Team\\EditTeamnaam.tsx",["117"],"import {useNavigate, useParams} from \"react-router-dom\";\r\nimport React, {ChangeEvent, useState} from \"react\";\r\nimport axios from \"axios\";\r\nimport {Button, Col, Container, Form, Row} from \"react-bootstrap\";\r\n\r\nconst EditTeam = () => {\r\n    let navigate = useNavigate();\r\n    let params = useParams();\r\n\r\n    const [teamNaam, setTeamNaam] = useState<string>(\"\");\r\n\r\n    const postTeamNaamURL = \"http://localhost:8080/api/teams/\" + params.id + \"/update/\" + teamNaam\r\n\r\n    const PostTeamNaam = async () => {\r\n        await axios.put(postTeamNaamURL, {} , {\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            },withCredentials : true\r\n        }).then((response) => {\r\n            console.log(response.data);\r\n            navigate(\"/Teams/\" + params.id);\r\n        }).catch(err => {\r\n            console.log(err);\r\n        });\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <Container className=\"col-md-5 bg-dark text-white-50\">\r\n                <h1>Team naam aanpassen</h1>\r\n\r\n                <br/>\r\n\r\n                <Form>\r\n                    <Form.Group className={\"mb-3\"}>\r\n                        <Form.Label>Team naam</Form.Label>\r\n                        <Form.Control name=\"naam\"\r\n                                      type={\"text\"}\r\n                                      placeholder=\"Naam\"\r\n                                      value={teamNaam}\r\n                                      onChange={(e) => setTeamNaam(prevState => prevState = e.target.value)}\r\n                        />\r\n                    </Form.Group>\r\n\r\n                    <Row className=\"justify-content-center\">\r\n                        <Col lg=\"3\">\r\n                            <Button variant={\"primary\"}  onClick={() => PostTeamNaam()}>\r\n                                Submit\r\n                            </Button>\r\n                        </Col>\r\n                        <Col>\r\n                            <Button onClick={() => navigate(-1)}>Terug</Button>\r\n\r\n                        </Col>\r\n                    </Row>\r\n                </Form>\r\n            </Container>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default EditTeam","C:\\Users\\Gebruiker\\Desktop\\Graduaat programmeren\\GIP4\\frontend\\src\\Components\\Speler\\SpelerMatchHist.tsx",["118","119"],"import React from \"react\";\r\nimport axios from \"axios\";\r\nimport {Link, useNavigate, useParams} from \"react-router-dom\";\r\nimport {Container, Table} from \"react-bootstrap\";\r\nimport moment from \"moment\";\r\n\r\ninterface Match {\r\n    id : number\r\n    teamBlue : Team\r\n    teamRed : Team\r\n    scoreBlueTeam : number\r\n    scoreRedTeam : number\r\n    datumtijd: Date\r\n}\r\n\r\ninterface Team {\r\n    id : number\r\n    naam : string\r\n    actief : boolean\r\n    managerDTO : {\r\n        id: number\r\n        userDTO: {\r\n            achternaam: string\r\n            email: string\r\n            id: number\r\n            role: string\r\n            username: string\r\n            voornaam: string\r\n        }\r\n    }\r\n    spelerDTO : SpelerDTO[]\r\n}\r\n\r\ninterface SpelerDTO{\r\n    id : number\r\n    reserve : boolean\r\n    spelerid: number\r\n}\r\n\r\n\r\nconst SpelerMatchHist = () => {\r\n\r\n    let params = useParams();\r\n\r\n    const [matches, setMatches] = React.useState<Match[]>([]);\r\n    const getMatchURL = \"http://localhost:8080/api/matches/matchhistory/speler/\";\r\n\r\n    // get spelers from api\r\n    React.useEffect(() => {\r\n        axios.get<Match[]>(getMatchURL, {\r\n            withCredentials: true\r\n        }).then((response) =>{\r\n            console.log(response.data);\r\n            setMatches(response.data);\r\n        }).catch((e) => {\r\n            console.log(e);\r\n        });\r\n    }, []);\r\n\r\n    return (\r\n        <>\r\n            <Container className=\"bg-dark text-white-50\">\r\n                <h1>Persoonlijke matchhistoriek</h1>\r\n                <br/>\r\n                <br/>\r\n                <Table striped bordered hover variant={'dark'}>\r\n                    <thead>\r\n                    <tr>\r\n                        <th className=\"col-md-0\">id</th>\r\n                        <th className=\"col-md-3\">Team Blue</th>\r\n                        <th className=\"col-md-3\">Team Red</th>\r\n                        <th>won</th>\r\n                        <th className=\"col-md-0\">blue - red</th>\r\n                        <th className=\"col-md-2\">datum en tijd</th>\r\n                        <th className=\"col-md-2\"> </th>\r\n                    </tr>\r\n                    </thead>\r\n\r\n                    <tbody>\r\n                    {\r\n                        matches.map(match => (\r\n                            <tr key={match.id}>\r\n                                <td>{match.id}</td>\r\n                                <td>{match.teamBlue.naam}</td>\r\n                                <td>{match.teamRed.naam}</td>\r\n                                <td>{\r\n                                    match.scoreRedTeam === 0 && match.scoreBlueTeam === 0 ? \"---\":\r\n                                        match.scoreRedTeam < match.scoreBlueTeam ? match.teamBlue.naam :  match.teamRed.naam\r\n                                }\r\n                                </td>\r\n                                <td>{match.scoreBlueTeam} - {match.scoreRedTeam}</td>\r\n                                <td>{moment(match.datumtijd).format('DD-MM-YYYY hh:mm')}</td>\r\n                                <td><Link to={\"/Matches/\" + match.id}>Details</Link></td>\r\n                            </tr>\r\n                        ))\r\n                    }\r\n                    </tbody>\r\n                </Table>\r\n            </Container>\r\n        </>\r\n    )\r\n\r\n}\r\n\r\nexport default SpelerMatchHist",{"ruleId":"120","replacedBy":"121"},{"ruleId":"122","replacedBy":"123"},{"ruleId":"120","replacedBy":"121"},{"ruleId":"122","replacedBy":"123"},{"ruleId":"124","severity":1,"message":"125","line":2,"column":33,"nodeType":"126","messageId":"127","endLine":2,"endColumn":44},{"ruleId":"124","severity":1,"message":"128","line":5,"column":8,"nodeType":"126","messageId":"127","endLine":5,"endColumn":14},{"ruleId":"129","severity":1,"message":"130","line":61,"column":8,"nodeType":"131","endLine":61,"endColumn":10,"suggestions":"132"},{"ruleId":"133","severity":1,"message":"134","line":29,"column":7,"nodeType":"126","messageId":"135","endLine":29,"endColumn":13},{"ruleId":"129","severity":1,"message":"130","line":61,"column":8,"nodeType":"131","endLine":61,"endColumn":10,"suggestions":"136"},{"ruleId":"124","severity":1,"message":"137","line":2,"column":27,"nodeType":"126","messageId":"127","endLine":2,"endColumn":35},{"ruleId":"133","severity":1,"message":"138","line":62,"column":7,"nodeType":"126","messageId":"135","endLine":62,"endColumn":11},{"ruleId":"129","severity":1,"message":"139","line":102,"column":8,"nodeType":"131","endLine":102,"endColumn":20,"suggestions":"140"},{"ruleId":"124","severity":1,"message":"141","line":1,"column":9,"nodeType":"126","messageId":"127","endLine":1,"endColumn":13},{"ruleId":"124","severity":1,"message":"142","line":2,"column":16,"nodeType":"126","messageId":"127","endLine":2,"endColumn":27},{"ruleId":"124","severity":1,"message":"143","line":4,"column":17,"nodeType":"126","messageId":"127","endLine":4,"endColumn":20},{"ruleId":"124","severity":1,"message":"144","line":4,"column":33,"nodeType":"126","messageId":"127","endLine":4,"endColumn":37},{"ruleId":"124","severity":1,"message":"145","line":4,"column":39,"nodeType":"126","messageId":"127","endLine":4,"endColumn":42},{"ruleId":"124","severity":1,"message":"146","line":5,"column":9,"nodeType":"126","messageId":"127","endLine":5,"endColumn":12},{"ruleId":"129","severity":1,"message":"147","line":71,"column":7,"nodeType":"131","endLine":71,"endColumn":9,"suggestions":"148"},{"ruleId":"124","severity":1,"message":"149","line":1,"column":8,"nodeType":"126","messageId":"127","endLine":1,"endColumn":12},{"ruleId":"124","severity":1,"message":"149","line":1,"column":8,"nodeType":"126","messageId":"127","endLine":1,"endColumn":12},{"ruleId":"124","severity":1,"message":"144","line":3,"column":33,"nodeType":"126","messageId":"127","endLine":3,"endColumn":37},{"ruleId":"150","severity":1,"message":"151","line":155,"column":33,"nodeType":"152","messageId":"153","endLine":155,"endColumn":35},{"ruleId":"124","severity":1,"message":"137","line":2,"column":29,"nodeType":"126","messageId":"127","endLine":2,"endColumn":37},{"ruleId":"129","severity":1,"message":"154","line":115,"column":8,"nodeType":"131","endLine":115,"endColumn":10,"suggestions":"155"},{"ruleId":"124","severity":1,"message":"142","line":2,"column":16,"nodeType":"126","messageId":"127","endLine":2,"endColumn":27},{"ruleId":"124","severity":1,"message":"156","line":3,"column":15,"nodeType":"126","messageId":"127","endLine":3,"endColumn":26},{"ruleId":"124","severity":1,"message":"157","line":43,"column":9,"nodeType":"126","messageId":"127","endLine":43,"endColumn":15},"no-native-reassign",["158"],"no-negated-in-lhs",["159"],"@typescript-eslint/no-unused-vars","'NavDropdown' is defined but never used.","Identifier","unusedVar","'Header' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'getSpelers'. Either include it or remove the dependency array.","ArrayExpression",["160"],"@typescript-eslint/no-redeclare","'Speler' is already defined.","redeclared",["161"],"'useState' is defined but never used.","'Team' is already defined.","React Hook useEffect has missing dependencies: 'getMatchURL' and 'getSpelers'. Either include them or remove the dependency array.",["162"],"'Link' is defined but never used.","'ChangeEvent' is defined but never used.","'Col' is defined but never used.","'Form' is defined but never used.","'Row' is defined but never used.","'map' is defined but never used.","React Hook useEffect has a missing dependency: 'getTeam'. Either include it or remove the dependency array.",["163"],"'user' is defined but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","React Hook React.useEffect has missing dependencies: 'getMatchURL' and 'match'. Either include them or remove the dependency array.",["164"],"'useNavigate' is defined but never used.","'params' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"165","fix":"166"},{"desc":"165","fix":"167"},{"desc":"168","fix":"169"},{"desc":"170","fix":"171"},{"desc":"172","fix":"173"},"Update the dependencies array to be: [getSpelers]",{"range":"174","text":"175"},{"range":"176","text":"175"},"Update the dependencies array to be: [getMatchURL, getSpelers, getTeamURL]",{"range":"177","text":"178"},"Update the dependencies array to be: [getTeam]",{"range":"179","text":"180"},"Update the dependencies array to be: [getMatchURL, match]",{"range":"181","text":"182"},[1474,1476],"[getSpelers]",[1503,1505],[2517,2529],"[getMatchURL, getSpelers, getTeamURL]",[1644,1646],"[getTeam]",[2637,2639],"[getMatchURL, match]"]